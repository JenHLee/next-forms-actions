// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model user {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  password   String
  email      String     @unique
  bio        String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  tweet      tweet[]
  like       like[]
  response   response[]
}

model tweet {
  id         Int        @id @default(autoincrement())
  tweet      String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  user       user       @relation(fields: [userId], references: [id])
  userId     Int
  like       like[]
  response   response[]
}

model like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet      tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId     Int
  tweetId    Int

  @@id(name: "id", [userId, tweetId])
}

model response {
  // id Int @id @default(autoincrement())

  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet      tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  userId  Int
  tweetId Int

  @@id(name: "id", [userId, tweetId])
}
